import{_ as s,c as a,o as t,ae as n}from"./chunks/framework.Cd-3tpCq.js";const d=JSON.parse('{"title":"Spring再配置","description":"","frontmatter":{},"headers":[],"relativePath":"docs/spring/reconfig.md","filePath":"docs/spring/reconfig.md"}'),l={name:"docs/spring/reconfig.md"};function h(e,i,p,k,r,E){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="spring再配置" tabindex="-1">Spring再配置 <a class="header-anchor" href="#spring再配置" aria-label="Permalink to &quot;Spring再配置&quot;">​</a></h1><h2 id="一、为什么我们需要-再配置" tabindex="-1">一、为什么我们需要“再配置”? <a class="header-anchor" href="#一、为什么我们需要-再配置" aria-label="Permalink to &quot;一、为什么我们需要“再配置”?&quot;">​</a></h2><h3 id="_1-pojo服务的两项配置问题" tabindex="-1">1.POJO服务的两项配置问题 <a class="header-anchor" href="#_1-pojo服务的两项配置问题" aria-label="Permalink to &quot;1.POJO服务的两项配置问题&quot;">​</a></h3><p>JavaBean形式的各种服务中，需要对其他服务和对自身属性的两项配置问题。</p><ol><li>对依赖的服务，javabean本身仅仅知道服务接口，但是无法确定服务的提供者。</li><li>对自身的配置项，仅仅能够提供一些默认值。</li></ol><p>这两项都可以称之为对bean的依赖配置或管理。现在IOC框架大都提供了基于xml或者 注解（Annotation)的配置方式。问题在于这些配置一旦模块化之后，就会发现难以克服的困难。</p><p>例如一个提供用户服务(UserService)的模块(bundle,jar),他依赖提供用户数据的服务（UserDao）. 实际上这两个服务的实现通常在同一模块中，以一个整体提供给系统的其他部分使用。如果我们提供了 另外一个服务UserDao接口的实现，并且想在整个系统中采用该实现的话，就需要将UserService实现的 提供者也使用该实现，但是userService实现的配置，无论是xml还是annotaion都是模块固化的，很难改变。</p><h3 id="_2-动态装配能否解决" tabindex="-1">2.动态装配能否解决? <a class="header-anchor" href="#_2-动态装配能否解决" aria-label="Permalink to &quot;2.动态装配能否解决?&quot;">​</a></h3><p>采用动态装配情况下，实现同一接口的两个实现，都难以提供给IOC容器选择。以spring为例</p><ol><li>autowire-byName策略，一般这种策略基于名字的唯一性，实际上起不到使用新实现的效果</li><li>autowire-byType策略，这种策略注定要失败，因为同一类型的bean提供了两个，spring无法选择。</li></ol><h3 id="_3-问题症结和最终需要" tabindex="-1">3.问题症结和最终需要 <a class="header-anchor" href="#_3-问题症结和最终需要" aria-label="Permalink to &quot;3.问题症结和最终需要&quot;">​</a></h3><p>如果所有的bean的配置定义(xml)全部从模块中抽出来，统一在一个配置文件中手工解决，倒是可以。 实际上就是个再次配置的过程，但是这与模块化有些背道而驰。其实配置本身就是个组装服务的过程，为什么 还需要对其进行模块后，再更改呢？原因只有一个，如果不进行默认配置，则服务端配置工作量会很大，如果 进行了默认配置但不允许更改，将会产生服务不可替换和不可更改参数的两种情况。</p><p>spring jira给出了个这方便的表述:<a href="http://jira.springframework.org/browse/SPR-5509" target="_blank" rel="noreferrer">http://jira.springframework.org/browse/SPR-5509</a></p><p>列举了两个情景：</p><ol><li>测试情况下，对配置的微调</li><li>扩展已有配置 或者说再配置的过程，应满足以下四个需要：</li><li>我们需要扩展已有配置，包括更改属性，置空，增加属性配置，调整集合中的值。</li><li>替换已有配置</li><li>增加新的配置</li><li>删除已有配置</li></ol><h2 id="二、使用spring可以接受的办法" tabindex="-1">二、使用spring可以接受的办法 <a class="header-anchor" href="#二、使用spring可以接受的办法" aria-label="Permalink to &quot;二、使用spring可以接受的办法&quot;">​</a></h2><h3 id="_1-不同文件中使用同一id" tabindex="-1">1.不同文件中使用同一ID <a class="header-anchor" href="#_1-不同文件中使用同一id" aria-label="Permalink to &quot;1.不同文件中使用同一ID&quot;">​</a></h3><p>基于spring的应用中，如果使用不同模块定义同一ID的bean，小心的规划模块之间的加载顺序，倒是可以 将之前模块的bean定义重新配置。实际上这适用于简单的情况，一旦模块中提供了很多可选实现，他就很难提供一个符合接口的唯一bean定义， 另外一般也不建议将不同实现的bean配置为同一个ID。这仅仅是spring提供的一个辅助特性。 例如最常见的是security中关于各种认证提供者（AuthenticationProvider）。</p><h3 id="_2-使用属性覆盖" tabindex="-1">2.使用属性覆盖 <a class="header-anchor" href="#_2-使用属性覆盖" aria-label="Permalink to &quot;2.使用属性覆盖&quot;">​</a></h3><p>org.springframework.beans.factory.config.PropertyOverrideConfigurer提供了一个基于属性 覆盖的策略，覆盖和修改单个属性，但是需要额外提供一个属性文件。</p><p>混合使用上述两中办法可以解决90%的情况，但是无法满足“删除已有配置”的需要。但是我们需要一个一致的，方便的 再次配置的途径。总体来讲利用现有的实现组合或配置一个符合要求的服务正是配置工作的核心。</p><h2 id="三、好策略在哪里" tabindex="-1">三、好策略在哪里? <a class="header-anchor" href="#三、好策略在哪里" aria-label="Permalink to &quot;三、好策略在哪里?&quot;">​</a></h2><h3 id="_1-全局再次配置" tabindex="-1">1.全局再次配置 <a class="header-anchor" href="#_1-全局再次配置" aria-label="Permalink to &quot;1.全局再次配置&quot;">​</a></h3><p>如果能将对所有配置文件的bean定义进行再次配置，则可以较为统一的解决所有配置问题。 再次配置中，仅仅需要对指定的bean进行</p><ol><li>属性赋值</li><li>删除原有配置</li><li>合并到原有配置 例如： 在使用hibernate的过程中，我们定义了一个bean为hibernateConfig配置如下：</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernateConfig&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernate.dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.hibernate.dialect.HSQLDialect&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernate.show_sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;false&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在测试环境下，我们需要更改为连接Oracle,不显示sql，但是需要动态更新数据库结构，即打开hbm2ddl的update。 因此，再配置如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernateConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;property </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">props</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernate.dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.hibernate.dialect.OracleDialect&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hibernate.hbm2ddl.auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;update&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>按照Don&#39;t Repeat it Yourself的原则，我们在配置中，不再声明hibernateConfig的类型，除非需要更换实现类。对于属性properties的再次配置，我们使用了合并属性的方式，仅仅更改了方言和添加了hbm2ddl的配置。</p><p>所以这些再配置信息,集中放在一个文件中，例如spring-config.xml中，即可实现手工对bean默认配置的更改。<em>目前beangle-commons中的config包按照spring的PostProcessor方式实现了上述建议的再次配置功能。</em></p>`,30)]))}const g=s(l,[["render",h]]);export{d as __pageData,g as default};
